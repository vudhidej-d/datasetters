{"version":3,"sources":["shared.js","DataCreateForm.js","DataTable.js","App.js","serviceWorker.js","index.js"],"names":["categories","whWords","Option","Select","FormItem","Form","Item","TextArea","Input","create","props","getFieldDecorator","form","db","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","react_default","a","createElement","es_form","label","rules","required","input","initialValue","es_select","map","category","index","value","key","whWord","style","textAlign","es_button","onClick","e","validateFields","preventDefault","_ref","asyncToGenerator","regenerator_default","mark","_callee","err","values","categoryId","whId","wrap","_context","prev","next","abrupt","findIndex","wh","collection","add","objectSpread","notification","message","t0","console","error","finish","stop","this","_x","_x2","apply","arguments","width","height","type","columns","title","dataIndex","filters","text","onFilter","record","indexOf","DataTable","dataSource","table","pagination","pageSize","TabPane","Tabs","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","state","dataset","_this2","onSnapshot","querySnapshot","setState","forEach","doc","push","data","_this$state","className","tabs","defaultActiveKey","tab","icon","padding","src_DataTable","src_DataCreateForm","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0ad5c2e.chunk.js","sourcesContent":["export const categories = [\n  'Science',\n  'History',\n  'Religion',\n  'Thailand',\n  'Art',\n  'Music',\n  'International',\n  'Technology',\n  'Health',\n  'Food',\n]\n\nexport const whWords = [\n  'Who',\n  'When',\n  'Where',\n  'What',\n  'How + Adj/Adv',\n]","import React, { useState } from 'react'\nimport { Form, Select, Input, Button, notification } from 'antd'\nimport { categories, whWords } from './shared'\n\nconst { Option } = Select\nconst { Item: FormItem } = Form\nconst { TextArea } = Input\n\nconst DataCreateForm = (props) => {\n  const {\n    form: { getFieldDecorator },\n    db,\n  } = props\n\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = (e) => {\n    const { form: { validateFields } } = props\n    e.preventDefault()\n    validateFields(async (err, values) => {\n      if (err) return\n      const categoryId = categories.findIndex((category) => category === values.category)\n      const whId = whWords.findIndex((whWord) => whWord === values.wh)\n      try {\n        setLoading(true)\n        await db.collection(\"dataset\").add({\n          ...values,\n          categoryId,\n          whId,\n        })\n        notification['success']({\n          message: 'Data added successfully.',\n        });\n      } catch (e) {\n        console.error(e)\n        notification['error']({\n          message: 'Something went wrong, please try again.',\n        });\n      } finally {\n        setLoading(false)\n      }\n    })\n  }\n\n  return (\n    <Form>\n      <FormItem label=\"Article ID\">\n        {getFieldDecorator('articleId', {\n          rules: [{ required: true }],\n        })(<Input />)}\n      </FormItem>\n      <FormItem label=\"Article\">\n        {getFieldDecorator('article', {\n          rules: [{ required: true }],\n        })(<Input />)}\n      </FormItem>\n      <FormItem label=\"Category\">\n        {getFieldDecorator('category', {\n          initialValue: 'Science',\n          rules: [{ required: true }],\n        })(<Select>\n          {categories.map((category, index) => <Option value={category} key={index}>{category}</Option>)}\n        </Select>)}\n      </FormItem>\n      <FormItem label=\"Paragraph\">\n        {getFieldDecorator('paragraph', {\n          rules: [{ required: true }],\n        })(<TextArea />)}\n      </FormItem>\n      <FormItem label=\"WH Word\">\n        {getFieldDecorator('wh', {\n          initialValue: 'Who',\n          rules: [{ required: true }],\n        })(<Select>\n          {whWords.map((whWord, index) => (<Option value={whWord} key={index}>{whWord}</Option>))}\n        </Select>)}\n      </FormItem>\n      <FormItem label=\"Question\">\n        {getFieldDecorator('question', {\n          rules: [{ required: true }],\n        })(<Input />)}\n      </FormItem>\n      <FormItem label=\"Answer\">\n        {getFieldDecorator('answer', {\n          rules: [{ required: true }],\n        })(<Input />)}\n      </FormItem>\n      <FormItem style={{ textAlign: 'center' }}>\n        <Button\n          onClick={handleSubmit}\n          style={{ width: 100, height: 40 }}\n          type=\"primary\"\n          loading={loading}\n        >Add</Button>\n      </FormItem>\n    </Form>\n  )\n}\n\nexport default Form.create()(DataCreateForm)\n","import React from 'react'\nimport { Table } from 'antd'\nimport { categories, whWords } from './shared'\n\nconst columns = [{\n  title: 'Article ID',\n  dataIndex: 'articleId',\n  key: 'articleId',\n}, {\n  title: 'Article',\n  dataIndex: 'article',\n  key: 'article',\n}, {\n  title: 'Category',\n  dataIndex: 'category',\n  key: 'category',\n  filters: categories.map((category) => ({ text: category, value: category })),\n  onFilter: (value, record) => record.category.indexOf(value) === 0,\n}, {\n  title: 'Paragraph',\n  dataIndex: 'paragraph',\n  key: 'paragraph',\n}, {\n  title: 'WH Word',\n  dataIndex: 'wh',\n  key: 'wh',\n  filters: whWords.map((whWord) => ({ text: whWord, value: whWord })),\n  onFilter: (value, record) => record.wh.indexOf(value) === 0,\n}, {\n  title: 'Question',\n  dataIndex: 'question',\n  key: 'question',\n}, {\n  title: 'Answer',\n  dataIndex: 'answer',\n  key: 'answer',\n}];\n\nconst DataTable = ({ dataSource, loading }) => {\n  return (\n    <Table dataSource={dataSource} columns={columns} pagination={{ pageSize: 8 }} loading={loading} />\n  )\n}\n\nexport default DataTable\n","import React, { Component } from 'react'\nimport firebase from 'firebase'\nimport { Tabs, Icon } from 'antd'\nimport DataCreateForm from './DataCreateForm'\nimport DataTable from './DataTable'\n\nconst { TabPane } = Tabs\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    const config = {\n      apiKey: \"AIzaSyAeaMv3Y2fp877wzX187ZjT5-7AwxZkU0Y\",\n      authDomain: \"datasetters.firebaseapp.com\",\n      databaseURL: \"https://datasetters.firebaseio.com\",\n      projectId: \"datasetters\",\n      storageBucket: \"datasetters.appspot.com\",\n      messagingSenderId: \"340269058452\"\n    }\n    firebase.initializeApp(config)\n    this.db = firebase.firestore()\n    this.state = {\n      dataset: [],\n      loading: true,\n    }\n  }\n\n  componentDidMount() {\n    this.db.collection('dataset').onSnapshot((querySnapshot) => {\n      this.setState({ loading: true })\n      const dataset = []\n      querySnapshot.forEach((doc) => { dataset.push(doc.data()) })\n      this.setState({ dataset, loading: false })\n    })\n  }\n\n  render() {\n    const { dataset, loading } = this.state\n    const dataSource = dataset.map((data, index) => ({\n      ...data,\n      key: index\n    }))\n    return (\n      <div className=\"App\">\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab={<span><Icon type=\"database\" />Data Table</span>} key=\"1\">\n          <div style={{ padding: '20px 30px' }}>\n            <h1>Dataset</h1>\n            <DataTable dataSource={dataSource} loading={loading} />\n          </div>\n        </TabPane>\n        <TabPane tab={<span><Icon type=\"file-add\" />Add Data</span>} key=\"2\">\n          <div style={{ padding: '20px 100px' }}>\n            <h1>Add Data</h1>\n            <DataCreateForm db={this.db} />\n          </div>\n        </TabPane>\n      </Tabs>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'antd/dist/antd.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}