{"version":3,"sources":["shared.js","DataCreateForm.js","DataTable.js","App.js","serviceWorker.js","index.js"],"names":["categories","whWords","saveFile","data","contentType","fileName","arguments","length","undefined","ext","blob","Blob","decodeURIComponent","encodeURI","type","url","URL","createObjectURL","link","document","createElement","setAttribute","event","createEvent","initMouseEvent","window","dispatchEvent","Option","Select","FormItem","Form","Item","TextArea","Input","create","props","getFieldDecorator","form","db","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","react_default","a","es_form","label","rules","required","input","initialValue","es_select","map","category","index","value","key","whWord","style","textAlign","es_button","onClick","e","validateFields","preventDefault","_ref","asyncToGenerator","regenerator_default","mark","_callee","err","values","categoryId","whId","wrap","_context","prev","next","abrupt","findIndex","wh","collection","add","objectSpread","notification","message","t0","console","error","finish","stop","_x","_x2","apply","this","width","height","columns","title","dataIndex","filters","text","onFilter","record","indexOf","DataTable","dataSource","table","pagination","pageSize","TabPane","Tabs","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","state","dataset","downloading","json","csv","_this2","onSnapshot","querySnapshot","setState","forEach","doc","push","_this$state","JSON","stringify","log","header","fields","keys","obj","field","join","splice","jsonToCSV","_this3","_this$state2","className","tabs","defaultActiveKey","tab","icon","padding","shape","size","handleDownload","src_DataTable","src_DataCreateForm","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cbb8022.chunk.js","sourcesContent":["export const categories = [\r\n  'Science',\r\n  'History',\r\n  'Religion',\r\n  'Thailand',\r\n  'Art',\r\n  'Music',\r\n  'International',\r\n  'Technology',\r\n  'Health',\r\n  'Food',\r\n]\r\n\r\nexport const whWords = [\r\n  'Who',\r\n  'When',\r\n  'Where',\r\n  'What',\r\n  'How + Adj/Adv',\r\n]\r\n\r\nexport function saveFile(data, contentType, fileName=\"file\", ext=\"txt\") {\r\n  const blob = new Blob([decodeURIComponent(encodeURI(data))], { type: contentType })\r\n  const url = URL.createObjectURL( blob )\r\n  const link = document.createElement( 'a' )\r\n  link.setAttribute( 'href', url )\r\n  link.setAttribute( 'download', fileName + '.' + ext )\r\n  const event = document.createEvent( 'MouseEvents' )\r\n  event.initMouseEvent( 'click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null)\r\n  link.dispatchEvent( event )\r\n}\r\n\r\nexport function jsonToCSV(json, header=false) {\r\n  let fields = Object.keys(json[0])\r\n  let csv = json.map(obj => {\r\n    return fields.map(field => {\r\n      return obj[field]\r\n    }).join(',')\r\n  })\r\n  if (header) csv.splice(0, 0, fields)\r\n  return csv.join('\\n')\r\n}","import React, { useState } from 'react'\r\nimport { Form, Select, Input, Button, notification } from 'antd'\r\nimport { categories, whWords } from './shared'\r\n\r\nconst { Option } = Select\r\nconst { Item: FormItem } = Form\r\nconst { TextArea } = Input\r\n\r\nconst DataCreateForm = (props) => {\r\n  const {\r\n    form: { getFieldDecorator },\r\n    db,\r\n  } = props\r\n\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const handleSubmit = (e) => {\r\n    const { form: { validateFields } } = props\r\n    e.preventDefault()\r\n    validateFields(async (err, values) => {\r\n      if (err) return\r\n      const categoryId = categories.findIndex((category) => category === values.category)\r\n      const whId = whWords.findIndex((whWord) => whWord === values.wh)\r\n      try {\r\n        setLoading(true)\r\n        await db.collection(\"dataset\").add({\r\n          ...values,\r\n          categoryId,\r\n          whId,\r\n        })\r\n        notification['success']({\r\n          message: 'Data added successfully.',\r\n        });\r\n      } catch (e) {\r\n        console.error(e)\r\n        notification['error']({\r\n          message: 'Something went wrong, please try again.',\r\n        });\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <FormItem label=\"Article ID\">\r\n        {getFieldDecorator('articleId', {\r\n          rules: [{ required: true }],\r\n        })(<Input />)}\r\n      </FormItem>\r\n      <FormItem label=\"Article\">\r\n        {getFieldDecorator('article', {\r\n          rules: [{ required: true }],\r\n        })(<Input />)}\r\n      </FormItem>\r\n      <FormItem label=\"Category\">\r\n        {getFieldDecorator('category', {\r\n          initialValue: 'Science',\r\n          rules: [{ required: true }],\r\n        })(<Select>\r\n          {categories.map((category, index) => <Option value={category} key={index}>{category}</Option>)}\r\n        </Select>)}\r\n      </FormItem>\r\n      <FormItem label=\"Paragraph\">\r\n        {getFieldDecorator('paragraph', {\r\n          rules: [{ required: true }],\r\n        })(<TextArea />)}\r\n      </FormItem>\r\n      <FormItem label=\"WH Word\">\r\n        {getFieldDecorator('wh', {\r\n          initialValue: 'Who',\r\n          rules: [{ required: true }],\r\n        })(<Select>\r\n          {whWords.map((whWord, index) => (<Option value={whWord} key={index}>{whWord}</Option>))}\r\n        </Select>)}\r\n      </FormItem>\r\n      <FormItem label=\"Question\">\r\n        {getFieldDecorator('question', {\r\n          rules: [{ required: true }],\r\n        })(<Input />)}\r\n      </FormItem>\r\n      <FormItem label=\"Answer\">\r\n        {getFieldDecorator('answer', {\r\n          rules: [{ required: true }],\r\n        })(<Input />)}\r\n      </FormItem>\r\n      <FormItem style={{ textAlign: 'center' }}>\r\n        <Button\r\n          onClick={handleSubmit}\r\n          style={{ width: 100, height: 40 }}\r\n          type=\"primary\"\r\n          loading={loading}\r\n        >Add</Button>\r\n      </FormItem>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default Form.create()(DataCreateForm)\r\n","import React from 'react'\r\nimport { Table } from 'antd'\r\nimport { categories, whWords } from './shared'\r\n\r\nconst columns = [{\r\n  title: 'Article ID',\r\n  dataIndex: 'articleId',\r\n  key: 'articleId',\r\n}, {\r\n  title: 'Article',\r\n  dataIndex: 'article',\r\n  key: 'article',\r\n}, {\r\n  title: 'Category',\r\n  dataIndex: 'category',\r\n  key: 'category',\r\n  filters: categories.map((category) => ({ text: category, value: category })),\r\n  onFilter: (value, record) => record.category.indexOf(value) === 0,\r\n}, {\r\n  title: 'Paragraph',\r\n  dataIndex: 'paragraph',\r\n  key: 'paragraph',\r\n}, {\r\n  title: 'WH Word',\r\n  dataIndex: 'wh',\r\n  key: 'wh',\r\n  filters: whWords.map((whWord) => ({ text: whWord, value: whWord })),\r\n  onFilter: (value, record) => record.wh.indexOf(value) === 0,\r\n}, {\r\n  title: 'Question',\r\n  dataIndex: 'question',\r\n  key: 'question',\r\n}, {\r\n  title: 'Answer',\r\n  dataIndex: 'answer',\r\n  key: 'answer',\r\n}];\r\n\r\nconst DataTable = ({ dataSource, loading }) => {\r\n  return (\r\n    <Table dataSource={dataSource} columns={columns} pagination={{ pageSize: 8 }} loading={loading} />\r\n  )\r\n}\r\n\r\nexport default DataTable\r\n","import React, { Component } from 'react'\r\nimport firebase from 'firebase'\r\nimport { Tabs, Icon, Button } from 'antd'\r\nimport DataCreateForm from './DataCreateForm'\r\nimport DataTable from './DataTable'\r\nimport { saveFile, jsonToCSV } from './shared'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    const config = {\r\n      apiKey: \"AIzaSyAeaMv3Y2fp877wzX187ZjT5-7AwxZkU0Y\",\r\n      authDomain: \"datasetters.firebaseapp.com\",\r\n      databaseURL: \"https://datasetters.firebaseio.com\",\r\n      projectId: \"datasetters\",\r\n      storageBucket: \"datasetters.appspot.com\",\r\n      messagingSenderId: \"340269058452\"\r\n    }\r\n    firebase.initializeApp(config)\r\n    this.db = firebase.firestore()\r\n    this.state = {\r\n      dataset: [],\r\n      loading: true,\r\n      downloading: {\r\n        json: false,\r\n        csv: false\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.db.collection('dataset').onSnapshot((querySnapshot) => {\r\n      this.setState({ loading: true })\r\n      const dataset = []\r\n      querySnapshot.forEach((doc) => { dataset.push(doc.data()) })\r\n      this.setState({ dataset, loading: false })\r\n    })\r\n  }\r\n\r\n  \r\n\r\n  handleDownload(type) {\r\n    const { downloading, dataset } = this.state\r\n    const isDownloading = downloading[type]\r\n    if (isDownloading) return\r\n    downloading[type] = true\r\n    this.setState({downloading})\r\n    if (type === 'json') {\r\n\r\n      let data = JSON.stringify(dataset)\r\n      console.log(data)\r\n      const fileName = \"dataset\";\r\n      const ext = \"json\"\r\n      const contentType = \"application/json;charset=utf-8;\";\r\n      saveFile(data, contentType, fileName, ext)\r\n\r\n    } else if (type === 'csv') {\r\n\r\n      let data = jsonToCSV(dataset, true)\r\n      console.log(data)\r\n      const fileName = \"dataset\";\r\n      const ext = \"csv\"\r\n      const contentType = \"text/csv;charset=utf-8;\";\r\n      saveFile(data, contentType, fileName, ext)\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n    downloading[type] = false\r\n    this.setState({downloading})\r\n  }\r\n\r\n  render() {\r\n    const { dataset, loading, downloading } = this.state\r\n    const dataSource = dataset.map((data, index) => ({\r\n      ...data,\r\n      key: index\r\n    }))\r\n    return (\r\n      <div className=\"App\">\r\n      <Tabs defaultActiveKey=\"1\">\r\n        <TabPane tab={<span><Icon type=\"database\" />Data Table</span>} key=\"1\">\r\n          <div style={{ padding: '20px 30px' }}>\r\n            <h1>\r\n              Dataset\r\n              <Button type=\"primary\" shape=\"round\" icon=\"download\" size=\"large\" className=\"download-btn json-btn\" onClick={(e) => this.handleDownload('json')} loading={downloading['json']}>JSON</Button>\r\n              <Button type=\"primary\" shape=\"round\" icon=\"download\" size=\"large\" className=\"download-btn csv-btn\" onClick={(e) => this.handleDownload('csv')} loading={downloading['csv']}>CSV</Button>\r\n            </h1>\r\n            <DataTable dataSource={dataSource} loading={loading} />\r\n          </div>\r\n        </TabPane>\r\n        <TabPane tab={<span><Icon type=\"file-add\" />Add Data</span>} key=\"2\">\r\n          <div style={{ padding: '20px 100px' }}>\r\n            <h1>Add Data</h1>\r\n            <DataCreateForm db={this.db} />\r\n          </div>\r\n        </TabPane>\r\n      </Tabs>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport 'antd/dist/antd.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}